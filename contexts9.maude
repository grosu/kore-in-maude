mod K is
  sorts K Token .
  subsort Token < K .
endm

mod CONTEXTS is
  including K .
  including INT .
  including META-LEVEL .

  op {_} : Int -> [K] .            --- de Bruijn indexes
  op gamma : K -> [K] .            --- de Bruijn context
  op _[_] : K K -> K [prec 0] .  --- context application

  op ERROR@K : -> K .
  op ERROR@Int : -> Int .
  op up : K -> K .
  op move : Term Int Int -> Term .

  eq up(K') = downTerm(move(upTerm(K'),1,1),ERROR@K) .

  var Q : Qid .
  var T : Term .  var NeTl : NeTermList .
  vars D N M : Int .

 ceq move('`{_`}[T], N, D) = '`{_`}[upTerm(if M >= N then M + D else M fi)]
  if M := downTerm(T,ERROR@Int) .
  eq move(Q[NeTl], N, D) = Q[move(NeTl, N, D)] .

---  eq move(K,N,D) = K .  --- hoping this equation will apply first; for performance only
***(
  eq move(L(Ks'), N, D) = L(move(Ks', N, D)) .
 ceq move((K',Ks'), N, D) = move(K', N, D), move(Ks', N, D) if K' =/= .KList /\ Ks' =/= .KList .
  eq move(.KList, N, D) = .KList .

  eq move(gamma(C'), N, D) = gamma(move(C', N + 1, D)) .
---is the rule below always needed?
  eq move(C'[Ks'], N, D) = move(C', N, D)[move(Ks', N, D)] .
  eq move({M}, N, D) = if M >= N then {M + D} else {M} fi .
  eq move(T, N, D) = T .
***)
  
  vars C K1 K2 : K .
  var K' : [K] .
  eq gamma(gamma(C)[K1])[K2] = gamma(gamma(C))[K2][K1] .
endm

mod BUILTINS is
  including K .
  including STRING .
  op id : String -> Token .
  op int : String -> Token .
  op bool : String -> Token .
  ops a b c : -> Token .
endm

mod IMP is
  including CONTEXTS .
  including BUILTINS .

  op top : K K -> K .
  op k : K -> K .
  op state : K -> K .
  op while : K K -> K .
  op if : K K K -> K .
  op leq : K K -> K .
  op asgn : K K -> K .
  op seq : K K -> K .
  op plus : K K -> K .
  op map : K K -> K .
  op bind : K K -> K .

  vars K  K1  K2  K3 X V U  : K .
  vars C' K' K1' K2' K3' : [K] .
  vars S S1 S2 : String .

--- The following rules initiate context representations, and then propagate
--- redexes up in the term structure.
--- Redex propagation rules can be equations in most cases, for performance.
--- Some static analysis is needed to make sure we do not need to stop
--- the propagation under certain operations.

--- comment out because there is no rule with k in it
  rl top(K1,K2') => gamma(top({1},up(K2')))[K1] .
  eq top(gamma(C')[K1],K2') = gamma(top(C',up(K2')))[K1] .
  rl top(K1',K2) => gamma(top(up(K1'),{1}))[K2] .
  eq top(K1',gamma(C')[K2]) = gamma(top(up(K1'),C'))[K2] .

***(
  eq top(gamma(C')[K1],K2) = gamma(top(C',K2))[K1] .
---  rl top({1},(K2)) => gamma(top({2},{1}))[K2] .
  eq top(K1',gamma(C')[K2]) = gamma(top(up(K1'),C'))[K2] .
  rl k(K) => gamma(k({1}))[K] .
  eq k(gamma(C')[K]) = gamma(k(C'))[K] .
  rl seq(K1,K2) => gamma(seq({1},(K2)))[K1] .
  eq seq(gamma(C')[K1],K2) = gamma(seq(C',(K2)))[K1] .
--- comment out if there are at least 2 elements in the state
---  rl state(K) => gamma(state({1}))[K] .
  eq state(gamma(C')[K]) = gamma(state(C'))[K] .
--- only one binding occurs in rules, so we can assume one redex
  rl map(K1,K2) => gamma(map({1},K2))[K1] .
  eq map(gamma(C')[K1],K2) = gamma(map(C',K2))[K1] .
  rl map(K1,K2) => gamma(map(K1,{1}))[K2] .
  eq map(K1,gamma(C')[K2]) = gamma(map(K1,C'))[K2] .
  rl asgn(K1,K2) => gamma(asgn((K1),{1}))[K2] .
  eq asgn(K1,gamma(C')[K2]) = gamma(asgn((K1),C'))[K2] .
  rl if(K1,K2,K3) => gamma(if({1},(K2),(K3)))[K1] .
  eq if(gamma(C')[K1],K2,K3) = gamma(if(C',(K2),(K3)))[K1] .

  rl leq(K1,K2) => gamma(leq({1},K2))[K1] .
  eq leq(gamma(C')[K1],K2) = gamma(leq(C',K2))[K1] .
  rl leq(K1,K2) => gamma(leq(K1,{1}))[K2] .
  eq leq(K1,gamma(C')[K2]) = gamma(leq(K1,C'))[K2] .
  rl plus(K1,K2) => gamma(plus({1},K2))[K1] .
  eq plus(gamma(C')[K1],K2) = gamma(plus(C',K2))[K1] .
  rl plus(K1,K2) => gamma(plus(K1,{1}))[K2] .
  eq plus(K1,gamma(C')[K2]) = gamma(plus(K1,C'))[K2] .
***)
***(
--- Semantic rules
  rl < C'[ id(S1)][bind(id(S1),int(S2))] >1
  => < C'{int(S2)}{bind(id(S1),int(S2))} >2 .

  rl < C'[asgn(id(S1),int(S2))][bind(id(S1),K)] >1
  => < C'{                skip}{bind(id(S1),int(S2))} >2 .

  rl < C'[seq(skip,K)] >1
  => < C'{          K} >2 .

  rl < C'[while(K1,K2)] >1
  => < C'{if(K1,seq(K2,while(K1,K2)),skip)} >2 .

  rl < C'[if(bool("true"),K1,K2)] >1
  => < C'{K1} >2 .

  rl < C'[if(bool("false"),K1,K2)] >1
  => < C'{K2} >2 .

  rl < C'[leq(int(S1),int(S2))] >1
  => < C'{leq@INT(int(S1),int(S2))} >2 .

  rl < C'[plus(int(S1),int(S2))] >1
  => < C'{plus@INT(int(S1),int(S2))} >2 .
***)

endm

rew up({1}) .

q

search top(a,b) =>* K' .

q

  rew
    top(k(
      seq(asgn(id("n"),int("100")),
      seq(asgn(id("s"),int("0")),
          while(leq(int("1"),id("n")),
                seq(asgn(id("s"),plus(id("s"),id("n"))),
                    asgn(id("n"),plus(id("n"),int("-1")))
                ))
      ))),
        state(map(bind(id("n"),int("0")),bind(id("s"),int("0")))))
       .

q

