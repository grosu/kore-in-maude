mod K is
  sorts K Token .
  subsort Token < K .
endm

mod CONTEXTS is
  including K .
  including INT .
  including META-LEVEL .

  op {_} : Int -> [K] .            --- de Bruijn indexes
  op gamma : K -> [K] .            --- de Bruijn context
  op _[_] : K K -> K [prec 0] .  --- context application

  op ERROR@K : -> K .
  op ERROR@Int : -> Int .
  op up : K -> K .
  op move :   Term     Int Int ->   Term .
  op move : NeTermList Int Int -> NeTermList .
  
  var K' : [K] .
  eq up(K') = downTerm(move(upTerm(K'),1,1),ERROR@K) .

  var Q : Qid .  vars T TK : Term .  var NeTl : NeTermList .  vars D N M : Int .
 ceq move('`{_`}[T], N, D) = '`{_`}[upTerm(if M >= N then M + D else M fi)]
  if M := downTerm(T,ERROR@Int) .
  eq move(Q[NeTl], N, D) = Q[move(NeTl, N, D)] .
  eq move((T,NeTl), N, D) = move(T, N, D), move(NeTl, N, D) .
  eq move(T, N, D) = T [owise] .

  op _{_} : [K] K -> K [prec 0] .
  eq gamma(K'){K} = downTerm(upTerm(K')[upTerm(K) / 1], ERROR@K) .

  op _[_/_] :   Term     Term Int ->   Term .
  op _[_/_] : NeTermList Term Int -> NeTermList .
  eq ('`{_`}[T])[TK / N] = if downTerm(T,ERROR@Int) == N then TK else '`{_`}[T] fi .
  eq ('gamma[T])[TK / N] = T[TK / N + 1] .
  eq (Q[NeTl])[TK / N] = Q[NeTl[TK / N]] .
  eq (T,NeTl)[TK / N] = T[TK / N], NeTl[TK / N] .

  vars K K1 K2 : K .
  eq gamma(gamma(K')[K1])[K2] = gamma(gamma(K'))[K2][K1] .
endm

mod EXECUTION-INFRASTRUCTURE is
  including CONTEXTS .

--- Next top level constructs ensure that rules are applied in a certain order.
--- They would not be needed if we had strategies.
  sort TopLevel .
  op <_>1 : K -> TopLevel .
  op <_>2 : K -> TopLevel . 
  op [_] : K -> TopLevel [strat(0) frozen] .
  var K1 K2 : K .
  --- A step applies between [_]-top configurations only after it succeeds
  --- between <_>1 and <_>2 configurations.  This was, we can trace the
  --- program execution by tracing the applications of the rule below.
 crl [K1] => [K2] if < K1 >1 => < K2 >2 .
endm

mod BUILTINS is
  including K .
  including CONVERSION .  --- strings and string conversions
  op id : String -> Token .
  op int : String -> Token .
  op bool : String -> Token .
  op  .Map : -> Token .
  op leq@INT : K K -> K .
  op plus@INT : K K -> K .
  vars S1 S2 : String .
  eq leq@INT(int(S1),int(S2))
   = if rat(S1,10) <= rat(S2,10) then bool("true") else bool("false") fi .
  eq plus@INT(int(S1),int(S2))
   = int(string(rat(S1,10) + rat(S2,10), 10)) .
endm

mod IMP is
  including EXECUTION-INFRASTRUCTURE .
  including BUILTINS .

  op top : K K -> K .
  op k : K -> K .
  op state : K -> K .
  op while : K K -> K .
  op if : K K K -> K .
  op leq : K K -> K .
  op asgn : K K -> K .
  op seq : K K -> K .
  op skip : -> Token .
  op plus : K K -> K .
  op map : K K -> K .
  op bind : K K -> K .

  vars K  K1  K2  K3 X V U  : K .
  vars C' K' K1' K2' K3' : [K] .
  vars S S1 S2 : String .

--- The following rules initiate context representations, and then propagate
--- redexes up in the term structure.
--- Redex propagation rules can be equations in most cases, for performance.
--- Some static analysis is needed to make sure we do not need to stop
--- the propagation under certain operations.

--- comment out because there is no rule with k in it
  rl top(K1,K2') => gamma(top({1},up(K2')))[K1] .
  eq top(gamma(C')[K1],K2') = gamma(top(C',up(K2')))[K1] .
  rl top(K1',K2) => gamma(top(up(K1'),{1}))[K2] .
  eq top(K1',gamma(C')[K2]) = gamma(top(up(K1'),C'))[K2] .
  rl k(K) => gamma(k({1}))[K] .
  eq k(gamma(C')[K]) = gamma(k(C'))[K] .
  rl seq(K1,K2') => gamma(seq({1},up(K2')))[K1] .
  eq seq(gamma(C')[K1],K2') = gamma(seq(C',up(K2')))[K1] .
  rl state(K) => gamma(state({1}))[K] .
  eq state(gamma(C')[K]) = gamma(state(C'))[K] .
  rl map(K1,K2') => gamma(map({1},up(K2')))[K1] .
  eq map(gamma(C')[K1],K2') = gamma(map(C',up(K2')))[K1] .
  rl map(K1',K2) => gamma(map(up(K1'),{1}))[K2] .
  eq map(K1',gamma(C')[K2]) = gamma(map(up(K1'),{1}))[K2] .
  rl asgn(K1',K2) => gamma(asgn(up(K1'),{1}))[K2] .
  eq asgn(K1',gamma(C')[K2]) = gamma(asgn(up(K1'),C'))[K2] .
  rl if(K1,K2',K3') => gamma(if({1},up(K2'),up(K3')))[K1] .
  eq if(gamma(C')[K1],K2',K3') = gamma(if(C',up(K2'),up(K3')))[K1] .
  rl leq(K1,K2') => gamma(leq({1},up(K2')))[K1] .
  eq leq(gamma(C')[K1],K2') = gamma(leq(C',up(K2')))[K1] .
  rl leq(K1',K2) => gamma(leq(up(K1'),{1}))[K2] .
  eq leq(K1',gamma(C')[K2]) = gamma(leq(up(K1'),C'))[K2] .
  rl plus(K1,K2') => gamma(plus({1},up(K2')))[K1] .
  eq plus(gamma(C')[K1],K2') = gamma(plus(C',up(K2')))[K1] .
  rl plus(K1',K2) => gamma(plus(up(K1'),{1}))[K2] .
  eq plus(K1',gamma(C')[K2]) = gamma(plus(up(K1'),C'))[K2] .

--- Semantic rules
  rl < C'[ id(S1)][bind(id(S1),int(S2))] >1
  => < C'{int(S2)}{bind(id(S1),int(S2))} >2 .

  rl < C'[asgn(id(S1),int(S2))][bind(id(S1),K)] >1
  => < C'{                skip}{bind(id(S1),int(S2))} >2 .

  rl < C'[seq(skip,K)] >1
  => < C'{          K} >2 .

  rl < C'[while(K1,K2)] >1
  => < C'{if(K1,seq(K2,while(K1,K2)),skip)} >2 .

  rl < C'[if(bool("true"),K1,K2)] >1
  => < C'{K1} >2 .

  rl < C'[if(bool("false"),K1,K2)] >1
  => < C'{K2} >2 .

  rl < C'[leq(int(S1),int(S2))] >1
  => < C'{leq@INT(int(S1),int(S2))} >2 .

  rl < C'[plus(int(S1),int(S2))] >1
  => < C'{plus@INT(int(S1),int(S2))} >2 .

endm

  rew [
    top(k(
      seq(asgn(id("n"),int("3")),
      seq(asgn(id("s"),int("0")),
          while(leq(int("1"),id("n")),
                seq(asgn(id("s"),plus(id("s"),id("n"))),
                    asgn(id("n"),plus(id("n"),int("-1")))
                ))
      ))),
        state(map(bind(id("n"),int("0")),bind(id("s"),int("0")))))
      ] .

q

