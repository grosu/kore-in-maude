mod KORE is
*** KAST
--- Since Maude does not allow us to define tokens, we will use wrapped strings as tokens.
--- For example, we cannot write `_+_` in Maude; so we'll write #Label("_+_").
--- For maximum clarity, we will also include a separate sort for each type of token.
  including STRING .
  sorts Label Token Variable Application Item K KList Sort .  --- we call these "K Label", etc.
  subsorts Token Variable Application < Item < K < KList .
  op #Label : String -> Label .
  op #Token : Sort String -> Token . --- Cosmin: if we have sorts, it may be good to have them explicitly "String String" is confusing
  op #Sort : String -> Sort .
  op #Variable : Sort String -> Variable .
  op _`(_`) : Label KList -> Application . --- Cosmin: would it be correct to "Application => Term"?
  op .K : -> K .  --- .::K instead of .K gives a parsing error
  op _~>_ : K K -> K [assoc id: .K] .  --- "assoc" has only parsing meaning here; id not needed
  op .KList : -> KList .
  op _,_ : KList KList -> KList [assoc id: .KList prec 100] .  --- prec seems to be required ...
--- no support yet for external variables/constants
----------------------------------
--- Not sure about _~>_ and _,_ being associative at this level.  Like for other K
--- definitions, we may want to have a syntax for parsing KORE and another syntax
--- for the semantics of KORE
--- Cosmin: yes, the assoc problem for KList seems the same as the usual user lists problem, just at the meta-level
----------------------------------

*** K rewriting
--- Rewrite relation => can be nested and binds as weakly as possible.
--- With => we also need brackets: K1 ~> (K2 ~> K3 => K4 ~> K5) ~> K6
  op _=>_ : K K -> K .  --- macro for "_ -> next _" with the matching logic notation (below)
---  op `(_`) : K -> K .  --- Maude uses parentheses for grouping already

*** Matching logic
--- We can delay implementing these for now if they raise issues.
  op _/\_ : K K -> K .
  op not_ : K -> K .
  op next_ : K -> K .
  op exists__ : Variable K -> K .
--- requires/ensures = sugar: "C[K1 => K2] requires K3 ensures K4" is "C[K1 /\ K3 => K2 /\ K4]"
--- Cosmin: yes, and it may be nice to move away from the sugar. "C[K1 /\ K3 => K2 /\ K4]" is both shorter and clearer. 
---         also, even in the current Java backend implementation, /\ would work well and be faster

*** Attributes
--- In the past, I proposed to just use KList for Attributes, but my proposal was rejected.
--- While I'd like you to reconsider, here is a syntax mimicking the current one.
  sorts AttributeKey Attribute AttributeList Attributes .
  op #AttributeKey : String -> AttributeKey .
  op _`(_`) : AttributeKey String -> Attribute .
  op .AttributeList : -> AttributeList .
  op _,_ : Attribute AttributeList -> AttributeList [format(d d s d)] .
  op [_] : AttributeList -> Attributes .
--- Cosmin: from my perspective, if we allow parsing empty KLists from "" instead of ".KList" (the same trick we do for user lists), 
--- using labeled syntax for attributes should work well. It's annoying to write "foo(a, .KList)" and "foo(.KList)", but "foo(a)" 
--- and "foo()" work well.

*** Outer
  sort Definition .
  op __ : RequireList ModuleList -> Definition .

--- Maude does not allow and empty constant, so for now we assume explicit .Sort
--- constants for optional parameters.  An alternative can be to use subsorting,
--- for example, subsort ModuleList < Definition, but that can be awkward when
--- you have multiple empty constants of different sorts next to each other.
--- When defining sequences of elements, we prefer a left-recursive grammar for
--- now.

  sorts Require RequireList .
  op require_ : String -> Require [format(n d d)] .
  op .RequireList : -> RequireList [format(n n)] .
  op __ : Require RequireList -> RequireList .

  sorts ModuleName Module ModuleList .
  op module___endmodule_ : ModuleName ImportList SentenceList Attributes -> Module [format(n d ++i d --in d n)] .
  op .ModuleList : -> ModuleList [format(n d)] .
  op __ : Module ModuleList -> ModuleList .

  op #ModuleName : String -> ModuleName .

  sorts Import ImportList .
  op import_ : ModuleName -> Import [format(ni d d)] .
  op .ImportList : -> ImportList [format(ni d)] .
  op __ : Import ImportList -> ImportList .

  sorts Sentence SentenceList .
  op .SentenceList : -> SentenceList [format(ni d)] .
  op __ : Sentence SentenceList -> SentenceList .

  op syntax__ : Sort Attributes -> Sentence .
  op syntax_::=__ : Sort Production Attributes -> Sentence [format(ni d d d n++i-- d)] .
  op syntax`priority_>__ : Label Label Attributes -> Sentence .
  op syntax`left__ : Label Attributes -> Sentence .
  op syntax`right__ : Label Attributes -> Sentence .
  op syntax`non-assoc__ : Label Attributes -> Sentence .

  sort Sort .
  op #Sort : String -> Sort .

  sorts ProductionItem Production .
  subsorts Sort String < ProductionItem < Production .
  op r_ : String -> ProductionItem .
  op __ : ProductionItem Production -> Production .

  op rule__ : K Attributes -> Sentence [format(ni d n++i-- d)] .

endm

mod EXAMPLES is
  including KORE .
  ops EMPTY IMP : -> Definition .

  eq EMPTY =
.RequireList
module #ModuleName("EMPTY")
  .ImportList
  .SentenceList
endmodule [.AttributeList]
.ModuleList
  .

  eq IMP =
require "domains.k"
.RequireList


module #ModuleName("IMP-SYNTAX-COMMON")
  import #ModuleName("DOMAINS")
  .ImportList

  syntax #Sort("AExp") ::= #Sort("Int") [.AttributeList]
  syntax #Sort("AExp") ::= #Sort("Id") [.AttributeList]
  syntax #Sort("AExp") ::= #Sort("AExp") "/" #Sort("AExp")
    [#AttributeKey("left")(""), #AttributeKey("strict")(""), #AttributeKey("klabel")("_/_ : AExp * AExp ->  AExp"), .AttributeList]
  syntax #Sort("AExp") ::= #Sort("AExp") "+" #Sort("AExp")
    [#AttributeKey("left")(""), #AttributeKey("strict")(""), #AttributeKey("klabel")("_+_ : AExp * AExp ->  AExp"), .AttributeList]
  syntax #Sort("AExp") ::= "(" #Sort("AExp") ")"
    [#AttributeKey("bracket")(""), #AttributeKey("klabel")("(_) : AExp -> AExp"), .AttributeList]
  syntax priority #Label("_/_ : AExp * AExp ->  AExp") > #Label("_+_ : AExp * AExp ->  AExp")
    [.AttributeList]

  syntax #Sort("BExp") ::= #Sort("Bool") [.AttributeList]
  syntax #Sort("BExp") ::= #Sort("AExp") "<=" #Sort("AExp")
    [#AttributeKey("seqstrict")(""), #AttributeKey("latex")("{#1}\leq{#2}"), #AttributeKey("klabel")("_<=_"), .AttributeList]

--- more to come here, but let's first converge on details

  .SentenceList
endmodule [.AttributeList]


module #ModuleName("IMP-SYNTAX-PROGRAM-PARSING")
  import #ModuleName("ID-PROGRAM-PARSING")
  import #ModuleName("IMP-SYNTAX-COMMON")
  .ImportList

--- more to come here, but let's first converge on details
  .SentenceList
endmodule [.AttributeList]


module #ModuleName("IMP-SYNTAX")
  import #ModuleName("IMP-SYNTAX-COMMON")
  .ImportList

  syntax #Sort("Ids") ::= ".Ids"
    [#AttributeKey("klabel")(".Ids : -> Ids"), .AttributeList]
  syntax #Sort("Ids") ::= #Sort("Id")
    [.AttributeList]
  syntax #Sort("Ids") ::= #Sort("Ids") "," #Sort("Ids")
    [#AttributeKey("assoc")(""), #AttributeKey("unit")(".Ids : -> Ids"), .AttributeList]

--- more to come here, but let's first converge on details
  .SentenceList
endmodule [.AttributeList]


module #ModuleName("IMP-SYNTAX-TRANSLATE")
  import #ModuleName("IMP-SYNTAX-PROGRAM-PARSING")
  import #ModuleName("IMP-SYNTAX")
  .ImportList
--- more to come here, but let's first converge on details
  .SentenceList
endmodule [.AttributeList]


module #ModuleName("IMP")
  import #ModuleName("IMP-SYNTAX")
  .ImportList

--- more to come here, but let's first converge on details

--- We need to discuss the rule below before we can continue.
---  rule <k> X = I:Int; => . ...</k> <state>... X |-> (_ => I) ...</state>
  rule #Label("...")(
         #Label("...")(.KList),
         #Label("<k>_</k> : K -> KCell") (
           (#Label("_=_; : Id * AExp -> Stmt")(#Variable("X", "Id"), #Variable("I", "Int"))
            => .K)
           ~> #Label("...")(.KList)
         ),
         #Label("...")(.KList),
         #Label("<state>_</state> : Map -> StateCell")(
           #Label("...")(.KList),

           #Label("...")(.KList)
         ),
         #Label("...")(.KList)
       )
    [.AttributeList]

--- more to come here, but let's first converge on details
  .SentenceList
endmodule [.AttributeList]

.ModuleList

  .

endm

---rewrite EMPTY .
rewrite IMP .

---set print mixfix off .

q

Questions about this definition:
- do we really need ~> as a K construct?  Can it be a label and thus the way K
  deal with evaluation contexts just a particular methodology and not an
  intrisic part of K ? Same question for =>.
  Cosmin: Syntacticly at least, I would say "no" for both. From the implementation
  perspective, this will simplify traversal code even further. 
- rename .::K and .::KList to . ?  if we get rid of ~> as above, then we may
  only need .::KList.
  Cosmin: I agree.
- Should we allow empty productions instead of sort declarations?  A pro
  argument is that we have fewer syntactic constructs.  A cons argument is
  that a sort declaration may be regarded as a different entityr, with
  different kinds of attributes.
  Cosmin: I don't quite follow.
- Should we add constant AttributeKeys which have special semantics, like
  "strict", as constants?
  Cosmin: we may want to discuss the attribute syntax separately.
- Brackets and disappearing injections are the same thing, arent's they?  A
  production which only has one non-terminal and the production disappears
  from the AST.
  Cosmin: Yes, I also think they can be seen as the same thing. That being
          said, I would really like for injections to not dissapear. If something
          is meant to dissapear, it should be declared as a subsort. And the
          dissapearing injections (including subsorts) could be done via rules as
          we discussed before.
- Should #Label contain more structured information than just a String?
  Cosmin: From my perspective, its semantics and any other information should live
          with the definition (module), not within the label.

Comments about old kast.k and e-kore.k:
- Stop having particular module names mean particular things in KORE!  You may do that in full K.
- Why do you call ATTRIBUTES a module which only defines one attribute?
- We agree on separating the attrbute listsand arguments  with commas, not spaces.
- The current attributes are a mixture of K (you use the "token" attribute) and something
  else.  I continue to believe that attributes can be just a KList.
  Cosmin: the attributes are definetely messed up and we should discuss and agree on them
- #emptyKProduction was never defined anywhere, but used in KProduction
