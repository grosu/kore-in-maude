mod K is
  sorts K KList Label Token .
  subsorts Token < K < KList .
  op _`(_`) : Label KList -> K [prec 0] .
  op .KList : -> KList .
  op _,_ : KList KList -> KList [assoc id: .KList] .
endm

mod CXT is
  inc K .
  pr INT .

  op {_} : Int -> [K] .
  op gamma_ : K -> [K] [gather(&)] .
  op _[_] : K KList -> K [prec 0] .

  op _[_/_] : K     K Int -> K     [prec 0] .
  op _[_/_] : KList K Int -> KList [prec 0] .

  ops up down : K -> K .
  op move : K     Int Int -> K     .
  op move : KList Int Int -> KList .

  var K  K1 : K .
  var K' K1' C' C1' C2' : [K] .
  var L : Label .
  var Ks  Ks1  Ks2  : KList .
  var Ks' Ks1' Ks2' : [KList] .
  var N M D M1 M2 : Int .
  var T : Token .

  --- Context application uses the de Bruijn "substitution".
--- Rule, because one may or may not apply the context.
---  rl (gamma C)[K] => down(C[up(K) / 1]) .

--- De Bruijn substitution: uses de Bruijn lifting
  eq (L(Ks'))[K' / N] = L(Ks'[K' / N]) .
 ceq (K1',Ks')[K' / N] = K1'[K' / N], Ks'[K' / N] if K1' =/= .KList /\ Ks' =/= .KList .
  eq .KList[K' / N] = .KList .
--- up(K') below should not be needed in final version; good for debugging
  eq (gamma C')[K' / N] = gamma (C'[up(K') / (N + 1)]) .
---  eq (gamma[M] C)[K / N] = gamma[M] C[move(K,1,M) / (N + M)] .
--- is the rule below needed?
---  eq (C[Ks])[K / N] = (C[K / N])[Ks[K / N]] .
  eq {M}[K' / N] = if M == N then K' else {M} fi .
  eq T[K' / N] = T .

--- De Bruijn up/down:
  eq up(K') = move(K',1,1) .
  eq down(K') = move(K',1,-1) .
  eq move(L(Ks'), N, D) = L(move(Ks', N, D)) .
 ceq move((K',Ks'), N, D) = move(K', N, D), move(Ks', N, D) if K' =/= .KList /\ Ks' =/= .KList .
  eq move(.KList, N, D) = .KList .

  eq move(gamma C', N, D) = gamma move(C', N + 1, D) .
---  eq move(gamma[M] C, N, D) = gamma[M] move(C, N + M, D) .
---is the rule below needed?
---  eq move(C[Ks], N, D) = move(C, N, D)[move(Ks, N, D)] .
  eq move({M}, N, D) = if M >= N then {M + D} else {M} fi .
  eq move(T, N, D) = T .

--- Symplification equations
--- The following equation could be a rule
---(
  eq (gamma (gamma C)[Ks1])[Ks2] = (gamma C)[Ks1,Ks2] .

  op _[[_]] : K KList -> K [prec 0] .
  eq (gamma C)[[K]] = down(C[up(K) / 1]) .
  eq C1[C2[Ks]] = (C1[[C2]])[Ks] .
  eq C[Ks1][Ks2] = C[[Ks1]][Ks2] .
---)

---  eq (gamma[M1] (gamma[M2] C)[Ks1])[Ks2] = (gamma[M1 + M2] C)[move(Ks1,1,- M2),Ks2] .
  eq (gamma C1')[(gamma C2')[K]] = (gamma C1'[C2' / 1])[K] .
endm

mod IMP is
  pr CXT .
  pr STRING .
  
  ops top k state : -> Label .
  ops if leq asgn seq : -> Label .
  ops bind map : -> Label .
  op  .Map : -> Token .
  ops a b s1 s2 : -> Token .
  op id : String -> Token .
  op int : String -> Token .
  op stmt : String -> Token .

  vars K  K1  K2  K3  : K .
  vars K' K1' K2' K3' : [K] .

***(
 crl top(K1,K2) => (gamma top({1},up(K2)))[K1] if not (K1 :: BruijnVariable) .
 crl top(K1,K2) => (gamma top(up(K1),{1}))[K2] if not (K2 :: BruijnVariable) .
 crl k(K) => (gamma k({1}))[K] if not (K :: BruijnVariable) .
 crl seq(K1,K2) => (gamma seq({1},up(K2)))[K1] if not (K1 :: BruijnVariable) .
 crl state(K) => (gamma state({1}))[K] if not (K :: BruijnVariable) .
 crl map(K1,K2) => (gamma map({1},up(K2)))[K1] if not (K1 :: BruijnVariable) .
--- crl map(K1,K2) => (gamma map(up(K1),{1}))[K2] if not (K2 :: BruijnVariable) .
***)
 
 rl if(K1,K2',K3') => (gamma if({1},up(K2'),up(K3')))[K1] .
 rl leq(K1,K2') => (gamma leq({1},up(K2')))[K1] .
 rl leq(K1',K2) => (gamma leq(up(K1'),{1}))[K2] .

endm

search if(leq(a,b),s1,s2) =>* K' .

q
search if(leq(a,b),s1,s2) =>* C[a,b] .
search if(leq(a,b),s1,s2) =>* C[b,a] .

q

search if(leq(a,b),s1,s2) =>* C[a,b] .
search if(leq(a,b),s1,s2) =>* C[b,a] .

q

--- search if(leq(id("a"),id("b")),stmt("s1"),stmt("s2")) =>* K .

***(
search top(k(seq(asgn(id("a"),int("3")),asgn(id("b"),int("7")))),
           state(map(bind(id("a"),int("0")),map(bind(id("b"),int("0")),.Map))))
   =>* K .
---   =>* C[asgn(X,V), bind(X,U)] .
***)

q
