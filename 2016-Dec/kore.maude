in matching-logic.maude

mod KORE is
  including MATCHING-LOGIC .

  sorts Module Definition .
  subsort Module < Definition .
  op __ : Definition Definition -> Definition
    [prec 110 assoc] .
  --- Again, if `assoc` too expensive for parsing, use `gather`

  sort Attribute .
  op [_] : PatternList -> Attribute .

  sort ModuleName .
  op module__endmodule_ : ModuleName SentenceList Attribute -> Module
    [format(ni d ++n --ni d n) prec 100] .

  sorts Sentence SentenceList .
  subsort Sentence < SentenceList .
  op .SentenceList : -> SentenceList [format(i o)] .
  op __ : SentenceList SentenceList -> SentenceList
    [format(d n d) prec 90 assoc id: .SentenceList] .

  op import_ : ModuleName -> Sentence
    [format(i d d)] .

  op syntax_::=__ : Sort Production Attribute -> Sentence
    [format(i d d d d d) prec 80 strat(3 0)] .
  --- strat(3 0) says that no desugaring happens in the first 2 arguments

  sorts Sort SortList .
  subsort Sort < SortList .
  op .SortList : -> SortList .
  op _,_ : SortList SortList -> SortList [assoc id: .SortList] .

  sort Production .
  op _`(_`) : Symbol SortList -> Production .

  op rule__ : Pattern Attribute -> Sentence
    [format(i d d d) prec 80] .

  op axiom__ : Pattern Attribute -> Sentence
    [format(i d d d) prec 80] .
endm

mod E-KORE is
*** This defines some syntactic sugar on top of KORE.
*** For now, it only adds options to arguments that are not always needed,
*** but in the future it may add a lot more; ideally, all desirable syntactic
*** sugar, except for the use of user-defined concrete syntax in rules, should
*** go here, eventually.
  including E-MATCHING-LOGIC .
  including KORE .

  op module__endmodule  : ModuleName SentenceList -> Module
    [format(ni d ++n --ni n) prec 100] .
  var M : ModuleName .  var Ss : SentenceList .
  eq module M Ss endmodule = module M Ss endmodule [\.] .

  subsort Symbol < Production .
  op syntax_::=_ : Sort Production -> Sentence
    [format(i d d d d) prec 80 strat(0)] .
  var S : Sort .  var P : Production .  var Sy : Symbol .  var Phi : Pattern .
  eq syntax S ::= P = syntax S ::= P [\.] .
  eq syntax S ::= Sy [Phi] = syntax S ::= Sy(.SortList) [Phi] .

  op rule_  : Pattern -> Sentence
    [format(i d d) prec 80] .
  eq rule Phi = rule Phi [\.] .

  op axiom_  : Pattern -> Sentence
    [format(i d d) prec 80] .
  eq axiom Phi = axiom Phi [\.] .
endm

