mod KSTRING is
  sort String .
  op <Strings> : -> String [special(id-hook StringSymbol())] .
endm

mod MATCHING-LOGIC is
*** Strings are basic patterns, but they must only be used to encode model
*** values, i.e., int("123"), bool("true"), etc.  In general, sort("string")
  including KSTRING .
*** Basic term-like syntax for structure:
  sorts Symbol Variable Pattern PatternList .
  subsorts String Variable < Pattern < PatternList .
  op _`(_`) : Symbol PatternList -> Pattern
    [prec 0 strat(2 0)] .
  --- We used ` above for escaping parentheses.
  --- The attribure strat(2 0) says that the first argument should never be
  --- evaluated; this is important because we want to allow constant symbols
  --- in the E-MATCHING-LOGIC module below, and then desugar them.
  op .PatternList : -> PatternList .
  op _,_ : PatternList PatternList -> PatternList
    [prec 100 assoc id: .PatternList] .
  --- Note that we used `assoc` although this is a syntax for parsing;
  --- if too slow, then use the `gather` attribute.
*** Logical constructs:
  op \true : -> Pattern .
  op \false : -> Pattern .
  op _\and_ : Pattern Pattern -> Pattern [assoc prec 55] .
  op _\or_ : Pattern Pattern -> Pattern [assoc prec 59] .
  op \not_ : Pattern -> Pattern [prec 53] .
  op _\implies_ : Pattern Pattern -> Pattern [prec 61 gather(e E)] .
  op \exists_._ : Variable Pattern -> Pattern .
  op \forall_._ : Variable Pattern -> Pattern .
  op \next_ : Pattern -> Pattern .
  op _=>_ : Pattern Pattern -> Pattern [prec 60] .
  op _=_ : Pattern Pattern -> Pattern [prec 60] .
endm

mod E-MATCHING-LOGIC is
*** Extending ML with sugar syntax allowing contant symbols to not take
*** the empty list of arguments.
*** In the future, we may also move the derived ML constructs above here,
*** as well as other derived constructs that we may like or need.
  including MATCHING-LOGIC .
  subsort Symbol < Pattern .
  var S : Symbol .
  eq S = S(.PatternList) .
endm

