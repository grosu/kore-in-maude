mod K is
  sorts K KList Label Token .
  subsorts Token < K < KList .
  op _`(_`) : Label KList -> K [prec 0] .
  op .KList : -> KList .
  op _,_ : KList KList -> KList [assoc id: .KList] .
endm

mod CONTEXTS is
  including K .
  including INT .

  op {_} : Int -> [K] .  --- de Bruijn indexes
  op gamma : K -> [K] .
  op _[_] : K KList -> K [prec 0] .

  op _[_/_] : K     K Int -> K     [prec 0] .
  op _[_/_] : KList K Int -> KList [prec 0] .

  ops up down : K -> K .
  op move : K     Int Int -> K     .
  op move : KList Int Int -> KList .

  var K  K1 : K .
  var K' K1' C' C1' C2' : [K] .
  var L : Label .
  var Ks  Ks1  Ks2  : KList .
  var Ks' Ks1' Ks2' : [KList] .
  var N M D M1 M2 : Int .
  var T : Token .

--- Context application uses the de Bruijn "substitution".

--- The following turned out to not be needed.
--- Rule, because one may or may not apply the context.
---  rl (gamma(C))[K] => down(C[up(K) / 1]) .

--- De Bruijn substitution: uses de Bruijn lifting
  eq (L(Ks'))[K' / N] = L(Ks'[K' / N]) .
 ceq (K1',Ks')[K' / N] = K1'[K' / N], Ks'[K' / N] if K1' =/= .KList /\ Ks' =/= .KList .
  eq .KList[K' / N] = .KList .
--- up(K') below should not be needed in final version; good for debugging
  eq gamma(C')[K' / N] = gamma(C'[up(K') / (N + 1)]) .
--- is the rule below always needed?
  eq (C'[Ks'])[K' / N] = (C'[K' / N])[Ks'[K' / N]] .
  eq {M}[K' / N] = if M == N then K' else {M} fi .
  eq T[K' / N] = T .

--- De Bruijn up/down:
  eq up(K') = move(K',1,1) .
  eq down(K') = move(K',1,-1) .
  eq move(L(Ks'), N, D) = L(move(Ks', N, D)) .
 ceq move((K',Ks'), N, D) = move(K', N, D), move(Ks', N, D) if K' =/= .KList /\ Ks' =/= .KList .
  eq move(.KList, N, D) = .KList .

  eq move(gamma(C'), N, D) = gamma(move(C', N + 1, D)) .
---is the rule below always needed?
  eq move(C'[Ks'], N, D) = move(C', N, D)[move(Ks', N, D)] .
  eq move({M}, N, D) = if M >= N then {M + D} else {M} fi .
  eq move(T, N, D) = T .

  op flatten : K -> K .
  eq flatten(L(Ks')) = L(flatten(Ks')) .
 ceq flatten(K1',Ks') = flatten(K1'), flatten(Ks') if K1' =/= .KList /\ Ks' =/= .KList .
  eq flatten(.KList) = .KList .
  eq flatten(gamma(C')[K']) = flatten(down(C'[up(K') / 1])) .
  eq flatten(T) = T .
--- following should NOT be needed
---  eq flatten({M}) = {M} .

--- Symplification equations
--- (not needed with this approach; syntax is broken; keeping them for the record)
--- Some of them may need to be rules
---(
  eq (gamma (gamma C)[Ks1])[Ks2] = (gamma C)[Ks1,Ks2] .
  op _[[_]] : K KList -> K [prec 0] .
  eq (gamma C)[[K]] = down(C[up(K) / 1]) .
  eq C1[C2[Ks]] = (C1[[C2]])[Ks] .
  eq C[Ks1][Ks2] = C[[Ks1]][Ks2] .
  eq (gamma[M1] (gamma[M2] C)[Ks1])[Ks2] = (gamma[M1 + M2] C)[move(Ks1,1,- M2),Ks2] .
  eq (gamma C1')[(gamma C2')[K]] = (gamma C1'[C2' / 1])[K] .
---)
endm

mod EXECUTION-INFRASTRUCTURE is
  including CONTEXTS .

--- Next top level constructs ensure that rules are applied in a certain order.
--- They would not be needed if we had strategies.
  sort TopLevel .
  op <_>1 : K -> TopLevel .
  op <_>2 : K -> TopLevel . 
  op [_] : K -> TopLevel [strat(0) frozen] .
  var K1 K2 : K .
  --- A step applies between [_]-top configurations only after it succeeds
  --- between <_>1 and <_>2 configurations.  This was, we can trace the
  --- program execution by tracing the applications of the rule below.
 crl [K1] => [K2] if < K1 >1 => < K2 >2 .
endm

mod BUILTINS is
  including K .
  including CONVERSION .  --- strings and string conversions
  op id : String -> Token .
  op int : String -> Token .
  op bool : String -> Token .
  op  .Map : -> Token .
  op leq@INT : -> Label .
  op plus@INT : -> Label .
  vars S1 S2 : String .
  eq leq@INT(int(S1),int(S2))
   = if rat(S1,10) <= rat(S2,10) then bool("true") else bool("false") fi .
  eq plus@INT(int(S1),int(S2))
   = int(string(rat(S1,10) + rat(S2,10), 10)) .
endm

mod IMP is
  including EXECUTION-INFRASTRUCTURE .
  including BUILTINS .

  ops top k state : -> Label .
  ops while if leq asgn seq plus : -> Label .
  op skip : -> Token .
  ops bind map : -> Label .

  vars K  K1  K2  K3 X V U  : K .
  vars C' K' K1' K2' K3' : [K] .
  vars S S1 S2 : String .

--- The following rules initiate context representations, and then proagate
--- redexes up in the term structure.
--- Redex propagation rules can be equations in most cases, for performance.
--- Some static analysis is needed to make sure we do not need to stop
--- the propagation under certain operations.

  rl top(K1,K2') => gamma(top({1},up(K2')))[K1] .
  eq top(gamma(C')[K1],K2') = gamma(top(C',up(K2')))[K1] .
  rl top(K1',K2) => gamma(top(up(K1'),{1}))[K2] .
  eq top(K1',gamma(C')[K2]) = gamma(top(up(K1'),C'))[K2] .
  rl k(K) => gamma(k({1}))[K] .
  eq k(gamma(C')[K]) = gamma(k(C'))[K] .
  rl seq(K1,K2') => gamma(seq({1},up(K2')))[K1] .
  eq seq(gamma(C')[K1],K2') = gamma(seq(C',up(K2')))[K1] .
  rl state(K) => gamma(state({1}))[K] .
  eq state(gamma(C')[K]) = gamma(state(C'))[K] .
  rl map(K1,K2') => gamma(map({1},up(K2')))[K1] .
  eq map(gamma(C')[K1],K2') = gamma(map(C',up(K2')))[K1] .
  rl map(K1',K2) => gamma(map(up(K1'),{1}))[K2] .
  eq map(K1',gamma(C')[K2]) = gamma(map(up(K1'),{1}))[K2] .
  rl asgn(K1',K2) => gamma(asgn(up(K1'),{1}))[K2] .
  eq asgn(K1',gamma(C')[K2]) = gamma(asgn(up(K1'),C'))[K2] .
  rl if(K1,K2',K3') => gamma(if({1},up(K2'),up(K3')))[K1] .
  eq if(gamma(C')[K1],K2',K3') = gamma(if(C',up(K2'),up(K3')))[K1] .
  rl leq(K1,K2') => gamma(leq({1},up(K2')))[K1] .
  eq leq(gamma(C')[K1],K2') = gamma(leq(C',up(K2')))[K1] .
  rl leq(K1',K2) => gamma(leq(up(K1'),{1}))[K2] .
  eq leq(K1',gamma(C')[K2]) = gamma(leq(up(K1'),C'))[K2] .
  rl plus(K1,K2') => gamma(plus({1},up(K2')))[K1] .
  eq plus(gamma(C')[K1],K2') = gamma(plus(C',up(K2')))[K1] .
  rl plus(K1',K2) => gamma(plus(up(K1'),{1}))[K2] .
  eq plus(K1',gamma(C')[K2]) = gamma(plus(up(K1'),C'))[K2] .

--- Semantic rules
  rl <         gamma(gamma(C')[ id(S1)])[bind(id(S1),int(S2))] >1
  => < flatten(gamma(gamma(C')[int(S2)])[bind(id(S1),int(S2))]) >2 .

  rl <         gamma(gamma(C')[asgn(id(S1),int(S2))])[bind(id(S1),K)] >1
  => < flatten(gamma(gamma(C')[                skip])[bind(id(S1),int(S2))]) >2 .

  rl <         gamma(C')[seq(skip,K)] >1
  => < flatten(gamma(C')[          K]) >2 .

  rl <         gamma(C')[while(K1,K2)] >1
  => < flatten(gamma(C')[if(K1,seq(K2,while(K1,K2)),skip)]) >2 .

  rl <         gamma(C')[if(bool("true"),K1,K2)] >1
  => < flatten(gamma(C')[K1]) >2 .

  rl <         gamma(C')[if(bool("false"),K1,K2)] >1
  => < flatten(gamma(C')[K2]) >2 .

  rl <         gamma(C')[leq(int(S1),int(S2))] >1
  => < flatten(gamma(C')[leq@INT(int(S1),int(S2))]) >2 .

  rl <         gamma(C')[plus(int(S1),int(S2))] >1
  => < flatten(gamma(C')[plus@INT(int(S1),int(S2))]) >2 .

endm

  rew [
    top(k(
      seq(asgn(id("n"),int("10")),
      seq(asgn(id("s"),int("0")),
          while(leq(int("1"),id("n")),
                seq(asgn(id("s"),plus(id("s"),id("n"))),
                    asgn(id("n"),plus(id("n"),int("-1")))
                ))
      ))),
        state(map(bind(id("n"),int("0")),bind(id("s"),int("0")))))
      ] .

q

